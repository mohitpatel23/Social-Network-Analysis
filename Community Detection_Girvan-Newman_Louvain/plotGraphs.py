# -*- coding: utf-8 -*-
"""plotGraphs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11AtAaer1T4DksDP3yxftkyblOmgP2E-D
"""

import networkx as nx
import matplotlib.pyplot as plt
import matplotlib


# Function to plot all 10 ego networks with input parameters : Graph G, pos(spring layout),
# fgsize = figure size , name = ego network node number and save them under graph folder.
 
def plot_egonetwork(G, pos, fgsize, name=''):
    plt.figure(figsize=(fgsize, fgsize))
    plt.axis('off')
    # plt.margins(tight=True)
    nodes = nx.draw_networkx_nodes(G, pos, node_size=120, node_color='yellow')
    nodes.set_edgecolor('black')
    nodes.set_linewidth(1.0)
    edges = nx.draw_networkx_edges(G, pos, edge_color='black')
    edges.set_linewidth(0.5)
    plt.savefig('graphs/' + name +'_egonetwork.png')
    plt.show()


# Function to plot girvan newman communities based with input parameters : Graph G, pos(spring layout), 
# coms = list of generated communities fgsize = figure size , name = ego network node number and save them under graph folder.


def plot_girvan_communities(G, pos, communities, fgsize, name):
    size = len(communities)
    print ('community count: ', size)
    count = 0.
    plt.figure(figsize=(fgsize, fgsize))
    plt.axis('off')
    # plt.margins(tight=True)
    for com in communities :
        count = count + 1.
        list_nodes = [nodes for nodes in com]
        values = [ (count / size) for nodes in list_nodes]
        nodes = nx.draw_networkx_nodes(G, 
                                       pos,
                                       list_nodes,
                                       cmap=plt.get_cmap('jet'),
                                       with_labels=False,
                                       node_size = 120,
                                       node_color = values,
                                       vmin=0.0, vmax=1.0 )
        nodes.set_edgecolor('black')
        nodes.set_linewidth(1.0)
    
    
    edges = nx.draw_networkx_edges(G, pos, alpha=0.5)
    edges.set_linewidth(0.5)
    plt.savefig('graphs/' + name +'_girvan_communities.png')
    plt.show()


 
# Function to plot bestpartion communities based on modularity with input parameters : Graph G, pos(spring layout),
# part = list of generated communities, fgsize = figure size , name = ego network node number and save them under graph folder.

def plot_bestpartition_communities(G, pos, communities, fgsize, name):
    size = float(len(set(communities.values())))
    print ('Found community count: ', size)
    count = 0.
    plt.figure(figsize=(fgsize, fgsize))
    plt.axis('off')
    # plt.margins(tight=True)
    for com in set(communities.values()) :
        count = count + 1.
        list_nodes = [nodes for nodes in communities.keys() if communities[nodes] == com]
        values = [ (count / size) for nodes in list_nodes]
        nodes = nx.draw_networkx_nodes(G, 
                                       pos,
                                       list_nodes,
                                       cmap=plt.get_cmap('jet'),
                                       with_labels=False,
                                       node_size = 120,
                                       node_color = values,
                                       vmin=0.0, vmax=1.0 )
        nodes.set_edgecolor('black')
        nodes.set_linewidth(1.0)
    
    
    edges = nx.draw_networkx_edges(G, pos, alpha=0.5)
    edges.set_linewidth(0.5)
    plt.show()
    plt.savefig('graphs/' + name +'_net_communities.png')
    
# Function to plot evaluation metrics
    
def plot_eval_metrics(title_,xlabel_,ylabel_,list_,l1,l2,l3):
    matplotlib.rc('figure', figsize=(13, 5))

    plt.title(title_)
    plt.xlabel(xlabel_)
    plt.ylabel(ylabel_)
    plt.plot(list_[0],'y',list_[1], 'r',list_[2],'g' ,markersize=15,label='C1')
    [a,b,c] = plt.plot(list_[0],'yo',list_[1], 'ro',list_[2],'go' ,markersize=10)
    plt.legend([a,b,c], [l1,l2,l3], loc=9,prop={'size': 12})
    plt.show()