# -*- coding: utf-8 -*-
"""read_egoNetwork.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cGCjEyRuLlkv7rgBSkci7vWj2492aKcI
"""
import os
import numpy as np
from itertools import combinations

import networkx as nx
import community as comm

from networkx.algorithms import community as nx_com
from networkx.algorithms.cluster import clustering

import matplotlib.pyplot as plt
import plotGraphs as plt_g

def read_edge_files(folder):

    # Retrive all files with name edges in it 

    edgeFiles = [file for file in os.listdir(folder) if 'edges' in file]
    print("Edge files of existing egonetworks: ",edgeFiles,'\n')

    # Retrive all nodes for each ego network in edgefiles

    egoNodes = [int(ego[:-6]) for ego in edgeFiles ]
    egoNodes.sort()

    print("nodes representing egonetworks: ",egoNodes)

    del edgeFiles
    return egoNodes

def create_graph(egoNodes,path):
    total_edges = []
    
    ego_graphs = []    
    for egoNode in egoNodes:
        edges = []
        
        with open(path + str(egoNode) + '.edges') as files:
            print('ego network : ',str(egoNode))
            
            for i, line in enumerate(files):
                words = line.split()
                edges.append((egoNode, (int(words[0]))))
                edges.append((egoNode, (int(words[1]))))
                edges.append((int(words[0]), int(words[1])))
        
        G = nx.Graph(edges)

        print(nx.info(G) + '\n')
        pos = nx.spring_layout(G)
        plt_g.plot_egonetwork(G, pos, 10, 'ego_'+str(egoNode))
        ego_graphs.append(G)
        total_edges.append(edges)
        
    return ego_graphs,total_edges

def read_communities_detected(communities,edges,egoNode):
    graph_edges = []
    

    for comb in combinations(communities,2):

        if comb in edges:
            graph_edges.append(comb)

    G = nx.Graph(graph_edges)

    print(nx.info(G) + '\n')
    pos = nx.spring_layout(G)
    plt_g.plot_egonetwork(G, pos, 10, 'ego_'+str(egoNode)+'sample_community')


    return G,graph_edges

def read_circles(egoNodes,path):
    true_circles = []

    for ego in egoNodes:
        with open(path + str(ego) + '.circles') as netfile:
            circles = []

            for j, line in enumerate(netfile):
                lst = line.split('\t')
                el, es = lst[0], lst[1:]
                circle  =[]
                for e in es:
                    circle.append(int(e))
                circles.append(circle)
        true_circles.append(circles)
                
    return true_circles